# ~/.config/zsh/lib/plugin_manager.zsh
zsh_add_file() {
    local FILE="$1"
    local TARGET="$ZDOTDIR/$FILE"

    local FILE_FOUND="zsh_add_file:-: File \"$FILE\" \e[0;32m successfully sourced \e[0m"
    local FILE_NOT_FOUND="zsh_add_file:-:\e[0;45m File \e[0m\"$FILE\" \e[0;45m not found! \e[0m"

    [[ -f "$TARGET" ]] && source "$TARGET" && {
        [[ "$ZSHF_VERBOSE" == "true" ]] && echo -e "$FILE_FOUND" || true
        return 0    # not an issue even if it s outside the block !!
    } || {
        echo -e "$FILE_NOT_FOUND"
        return 1
    }
    # [[ -f "$TARGET" ]] && source "$TARGET"  || echo -e "$FILE_NOT_FOUND"
    # return 0
}

zsh_add_plugin() {
    local REPO="$1"
    local PLUGIN_NAME="${REPO##*/}"
    local PLUGIN_PATH="$ZDOTDIR/plugins/$PLUGIN_NAME"

    local TRY1="plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    local TRY2="plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"

    local REPO_FOUND="zsh_add_plugin:-: Repo \"$REPO\" \e[0;32m added \e[0m"
    local REPO_NOT_FOUND="zsh_add_plugin:-: Repo \"$REPO\" \e[0;45m not found! \e[0m"

    echo -e "DEBUG: \n" # creating a space in output
    # [[ ! -d "$PLUGIN_PATH" ]] && git clone --depth=1 "https://github.com/$REPO.git" "$PLUGIN_PATH"
    if [[ ! -d "$PLUGIN_PATH" ]]; then
        if git clone --depth=1 "https://github.com/$REPO.git" "$PLUGIN_PATH"; then
            [[ $ZSHF_VERBOSE=="true" ]] && echo -e "zsh_add_plugin:-: Cloned \"$REPO\" to \"${PLUGIN_PATH/$HOME/~}\" " || true
        else
            echo -e "zsh_add_plugin:-: Failed to clone \"$REPO\"";
            return 1
        fi
    fi
    echo -e "DEBUG: Files from [\"$REPO.git\"] cloned to repo:[\"$PLUGIN_PATH\"] are:"; ll "$PLUGIN_PATH" ; echo "\n"

    local sourced_file=""
    if zsh_add_file "$TRY1"; then
        sourced_file="$TRY1"
    elif zsh_add_file "$TRY2"; then
        sourced_file="$TRY2"
    fi

    # sourcefile color
    local GREEN_FG="\e[0;32m"
    local MAGENTA_BG="\e[0;45m"
    local SFC="$( [[ $ZSHF_VERBOSE == true ]] && echo "$GREEN_FG${sourced_file##*/}" || echo "$MAGENTA_BG${sourced_file##*/}" )\e[0m"

    if [[ -n "$sourced_file" ]]; then
        [[ "$ZSHF_VERBOSE" == true || "$sourced_file" == "$TRY2" ]] && echo -e "$REPO_FOUND ["$SFC"]" || true
        # [[ "$ZSHF_VERBOSE" == "true" || "$sourced_file" == "$TRY2" ]] && print -P "$REPO_FOUND [\e[0;45mFile:\e[0m ${sourced_file##*/}]" || true
    else
        echo -e "$REPO_NOT_FOUND"
    fi
c
    # echo "\nDEBUG:" # creating a space in output
    echo "\n"

}


# :: original ones::
#
# zsh_add_file() {
#   [[ -f "$ZDOTDIR/$1" ]] && source "$ZDOTDIR/$1"
# }

# zsh_add_plugin() {
#   local REPO="$1"
#   local PLUGIN_NAME="${REPO##*/}"
#   local PLUGIN_PATH="$ZDOTDIR/plugins/$PLUGIN_NAME"

#   [[ ! -d "$PLUGIN_PATH" ]] && git clone --depth=1 "https://github.com/$REPO.git" "$PLUGIN_PATH"

#   zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" ||
#   zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
# }

zsh_add_completion() {
  local REPO="$1"
  local DO_COMPINIT="$2"
  local PLUGIN_NAME="${REPO##*/}"
  local PLUGIN_PATH="$ZDOTDIR/plugins/$PLUGIN_NAME"

  [[ ! -d "$PLUGIN_PATH" ]] && git clone --depth=1 "https://github.com/$REPO.git" "$PLUGIN_PATH"

  local COMP_FILES=("${PLUGIN_PATH}/_"*)
  [[ -f "${COMP_FILES[1]}" ]] && fpath+=("${PLUGIN_PATH}")

  zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"

  [[ "$DO_COMPINIT" == true ]] && compinit -u
}

zsh_update_plugins() {
  for DIR in "$ZDOTDIR"/plugins/*/.git; do
    local PLUGIN_PATH="${DIR%/.git}"
    echo "Updating ${PLUGIN_PATH##*/}..."
    git -C "$PLUGIN_PATH" pull --quiet --rebase
  done
}

zsh_auto_update_plugins() {
  local ZDOTDIR="$HOME/.config/zsh"
  local CACHE_FILE="$ZDOTDIR/logs/plugin-update.timestamp"
  local LOG_FILE="$ZDOTDIR/logs/plugin-update.log"
  local NOW=$(date +%s)
  local WEEK_SECONDS=$((7 * 24 * 60 * 60))

  mkdir -p "$ZDOTDIR"

  if [[ ! -f "$CACHE_FILE" ]] || (( NOW - $(cat "$CACHE_FILE") > WEEK_SECONDS )); then
    echo "[$(date)] Updating Zsh plugins..." | tee -a "$LOG_FILE"
    zsh_update_plugins 2>&1 | tee -a "$LOG_FILE"
    echo "$NOW" >| "$CACHE_FILE"
  fi
}
